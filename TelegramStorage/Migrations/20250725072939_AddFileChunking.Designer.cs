// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TelegramStorage.Data;

#nullable disable

namespace TelegramStorage.Migrations
{
    [DbContext(typeof(TelegramStorageContext))]
    [Migration("20250725072939_AddFileChunking")]
    partial class AddFileChunking
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TelegramStorage.Models.FileChunk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChunkIndex")
                        .HasColumnType("integer");

                    b.Property<long>("ChunkSize")
                        .HasColumnType("bigint");

                    b.Property<int>("FileRecordId")
                        .HasColumnType("integer");

                    b.Property<string>("TelegramFileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelegramMessageId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TelegramFileId");

                    b.HasIndex("FileRecordId", "ChunkIndex")
                        .IsUnique();

                    b.ToTable("FileChunks");
                });

            modelBuilder.Entity("TelegramStorage.Models.FileRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsChunked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TelegramChatId")
                        .HasColumnType("text");

                    b.Property<string>("TelegramFileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelegramMessageId")
                        .HasColumnType("text");

                    b.Property<int>("TotalChunks")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TelegramFileId");

                    b.HasIndex("UserId");

                    b.ToTable("FileRecords");
                });

            modelBuilder.Entity("TelegramStorage.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TelegramStorage.Models.FileChunk", b =>
                {
                    b.HasOne("TelegramStorage.Models.FileRecord", "FileRecord")
                        .WithMany("Chunks")
                        .HasForeignKey("FileRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileRecord");
                });

            modelBuilder.Entity("TelegramStorage.Models.FileRecord", b =>
                {
                    b.HasOne("TelegramStorage.Models.User", "User")
                        .WithMany("Files")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramStorage.Models.FileRecord", b =>
                {
                    b.Navigation("Chunks");
                });

            modelBuilder.Entity("TelegramStorage.Models.User", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
